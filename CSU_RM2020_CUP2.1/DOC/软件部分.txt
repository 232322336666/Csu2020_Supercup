


程序逻辑：

	使用自行开发的嵌入式实时操作系统CROS进行机器人软件部分的开发，按照机器人系统中的单元创建任务线程。

	初始化任务：上电后读取存储信息判断战车类型，创建相应的机器人结构单元任务(遥控接收任务、底盘任务、云台任务、发弹任务、底盘升降任务、吸弹任务、夹弹任务、拖车任务等)。

	遥控接收任务：接收遥控器发来的控制信号，根据战车类型（步兵、英雄或工程）、遥控方式（遥控器或鼠标键盘）对原始控制信号进行必要整理转换,将整理后的遥控命令利用同步原语分别发送给其他执行任务线程。

	底盘任务：从遥控接收任务中接收底盘控制信号，根据其进行底盘电机的pid计算及输出控制，并根据从裁判系统中读取的电流值控制底盘功率。对于有云台的战车类型（步兵或英雄），还会从云台任务中接收云台与底盘相对偏转角度，根据需要进行云台跟随。

	云台任务：从遥控接收任务中接收云台控制信号，根据其进行云台pitch轴与yaw轴的闭环控制，并从云台yaw轴电机电调中读取云台与底盘的偏转角度，将其发送给底盘任务供云台跟随。根据战车类型不同，实现不同区域范围的云台限位。

	发弹任务：从遥控接收任务中接收发弹控制信号，根据其控制拨弹电机控制单发点射和多发连射，并根据从裁判系统中读取的热量值，限制子弹发射。

	底盘升降任务：从遥控接收任务中接收底盘控制信号，根据其驱动升降电机进行底盘的升降。

	吸弹任务：从遥控接收任务中接收吸弹控制信号，根据其控制吸弹机构的伸缩与吸弹开关。

	夹弹任务：从遥控接收任务中接收夹弹控制信号，根据其控制机械臂与机械臂上的夹。

	拖车任务：从遥控接收任务中接收拖车控制信号，根据其控制拖车钩的放置。


	中断及中断处理任务：在中断任务中进行遥控器信号的接收，使用官方提供代码进行预处理和校验。由于所选用芯片自身缺陷，底盘电机电调、云台电机电调的数据接收直接在CAN中断而非中断任务中进行。


	优先级分配原则：首先根据实时性硬性要求，取实时性需求高者为高优先级，短时间且低频率者可取高优先级。其余按重要程度，对运行效率不重要者（如显示信息等）取低优先级。
	优先级分配：
		优先级0（最高）：中断处理任务（内核自带）。
		优先级1：发弹任务，底盘升降任务，吸弹任务，拖车任务。
		优先级2：遥控接收任务，底盘任务，云台任务。
		优先级3：夹弹任务。
		优先级4：指示灯任务。
		优先级5：串口发送任务（内核自带），串口命令解析执行任务（内核自带）。
		优先级6（最低）：空闲任务（内核自带）（可统计cpu占用率）。


创新性：

	自行开发了一种嵌入式实时操作系统内核――CROS，包含有多任务、抢占式调度、任务间通信等常规基础功能，支持cortex-M3/M4内核。使用此内核满足了程序的实时性需求，利用同步原语保障了数据结构的安全性，避免了可能出现的竞态。多任务的框架符合实际机器人系统的构造，按照不同机器人结构单元设置任务线程，不仅使程序耦合度降低，逻辑更加清晰，而且方便于开发流程，调试时不会影响到其他任务正常运行。

	为了实际开发需要，还在内核层面上设计了方便实用的串口通信接口，通过建立一个专门的串口命令解析任务，能够在程序运行中发送串口命令动态地执行用户设定的过程或修改参数，通过无线串口可实现无线调参，极大方便了软件开发调试过程。
	同时由于无线串口波特率有限制，若直接重载fputc为死循环等待上一个字符发送完成，则每次发送串口都将花费巨额时间，虽然在抢占式调度的作用下不会影响其他任务的实时性，但仍然使得该任务自身受到阻塞。故建立一个专门的串口发送任务，并给每个任务分配一定长度的字符串环形缓存区，重载fputc为存储当前输出字符到当前任务的缓存区，在串口任务中进行对各个任务的字符串缓存区的遍历和阻塞式输出，使得其他任务可以非阻塞地使用printf进行信息输出，而且同时还避免了字符串被打乱的可能。












